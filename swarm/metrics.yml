version: '3.5'
services:
  dockerd-exporter:
    image: stefanprodan/dockerd-exporter:latest
    networks:
      - metrics-net
    # environment:
    #   - DOCKER_GWBRIDGE_IP=172.18.0.1
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 16M
  node-exporter:
    image: flaviostutz/docker-swarm-node-exporter:0.14.5
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    networks:
      - metrics-net
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 16M
  cadvisor:
    image: google/cadvisor:v0.29.0
    command: -logtostderr -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - metrics-net
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 16M
  alertmanager:
    image: stefanprodan/swarmprom-alertmanager:v0.14.0
    environment:
      - SLACK_URL=${SLACK_URL:-https://hooks.slack.com/services/TOKEN}
      - SLACK_CHANNEL=${SLACK_CHANNEL:-general}
      - SLACK_USER=${SLACK_USER:-alertmanager}
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - alertmanager:/alertmanager
    networks:
      - metrics-net
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 16M
  unsee:
    image: cloudflare/unsee:v0.8.0
    environment:
      - "ALERTMANAGER_URIS=default:http://alertmanager:9093"
    networks:
      - metrics-net
    deploy:
      mode: replicated
      replicas: 1
  prometheus:
    image: stefanprodan/swarmprom-prometheus:v2.2.0-rc.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=1w'
    #environment:
    # - JOBS=traefik:8080
    volumes:
      - prometheus:/prometheus
    configs:
      - source: node_rules
        target: /etc/prometheus/swarm_node.rules.yml
      - source: task_rules
        target: /etc/prometheus/swarm_task.rules.yml
    networks:
      - metrics-net
    ports:
      - 9090:9090
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 64M
  grafana:
    image: flaviostutz/docker-swarm-grafana:5.1.3
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana:/var/lib/grafana
    networks:
      - metrics-net
    ports:
      - 3000:3000
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 16M
networks:
  metrics-net:
  # external: true
configs:
  node_rules:
    file: ./prometheus/node.rules.yml
  task_rules:
    file: ./prometheus/task.rules.yml
volumes:
  prometheus:
  grafana:
  alertmanager:
